Description: >
  Create VPC resources for MlFlow Fargate Service.

Parameters:
  S3BootstrapBucket:
    Type: String
  S3ExperimentBucket:
    Type: String

Resources:
  EcrRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowPull
            Effect: Allow
            Principal: "*"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
  PreConfig:
    Type: Custom::PreConfig
    Properties:
      ServiceToken: !GetAtt PreConfigLambda.Arn
      ProjectName: !Ref MasterContainerBuildProject
      EcrRepository: !Ref EcrRepository
  PreConfigLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Description: Start Horovod Master Container CodeBuild Project
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: !Join
          - |+

          -  - import json
             - import botocore
             - import boto3
             - import logging
             - import traceback
             - import cfnresponse
             - ''
             - logger = logging.getLogger()
             - logger.setLevel(logging.INFO)
             - ''
             - 'def start_build(properties):'
             - '    # Start the Container CodeBuild Job'
             - '    codebuild = boto3.client(''codebuild'')'
             - '    project_name = properties.get(''ProjectName'')'
             - '    return codebuild.start_build(projectName=project_name)'
             - ''
             - 'def lambda_handler(event, context):'
             - '    logger.debug(''Event: {}''.format(event)) #debug'
             - '    logger.debug(''Context: {}''.format(context)) #debug'
             - '    properties = event[''ResourceProperties'']'
             - '    responseData = {}'
             - '    if event[''RequestType''] == ''Create'':'
             - '        # Trigger the CodeBuild project upon cfn creation'
             - '        try:'
             - '            start_build_response = start_build(properties)'
             - '            logger.info(''successfully started build: {}''.format(start_build_response))'
             - '            responseData = {''Success'': ''Training Container ''+properties.get(''ProjectName'')+'' successfully started ...''}'
             - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, ''CustomResourcePhysicalID'')'
             - '        except Exception as e:'
             - '            logger.error(e, exc_info=True)'
             - '            responseData = {''Error'': traceback.format_exc(e)}'
             - '            cfnresponse.send(event, context, cfnresponse.FAILED, responseData, ''CustomResourcePhysicalID'')'
             - '    if event[''RequestType''] == ''Delete'':'
             - '        # Delete the ECR Repository upon cfn deletion'
             - '        try:'
             - '            ecr = boto3.client(''ecr'')'
             - '            ecr.delete_repository(repositoryName=properties.get(''EcrRepository''), force=True)'
             - '            logger.info(''delete ecr repository completed ...'')'
             - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, ''CustomResourcePhysicalID'')'
             - '        except Exception as e:'
             - '            logger.error(e, exc_info=True)'
             - '            responseData = {''Error'': traceback.format_exc(e)}'
             - '            cfnresponse.send(event, context, cfnresponse.FAILED, responseData, ''CustomResourcePhysicalID'')'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                Resource: !GetAtt MasterContainerBuildProject.Arn
              - Effect: Allow
                Action:
                  - 'ecr:*'
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepository}
  MasterContainerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-BuildMasterContainer
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: S3
        Location: !Sub "${S3BootstrapBucket}/artifacts/horovod-src.zip"
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - apt-get update && apt-get -y install python-pip
                - pip install --upgrade python
                - pip install --upgrade awscli
            pre_build:
              commands: 
                - printenv
                - printf "%s:%s" "$REPOSITORY_URI" "latest" > /tmp/build_tag.out
            build:
              commands:
                - docker build -t "$(cat /tmp/build_tag.out)" .
            post_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - docker push "$(cat /tmp/build_tag.out)"
      Environment:
        ComputeType: "BUILD_GENERAL1_LARGE"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}
      ServiceRole: !Ref CodeBuildServiceRole
      TimeoutInMinutes: 120
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - codebuild:BatchGetBuilds
              - Resource:
                  - !Sub arn:aws:s3:::${S3BootstrapBucket}/*
                  - !Sub arn:aws:s3:::${S3BootstrapBucket}
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:PutObject*
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

Outputs:
  MasterImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:latest