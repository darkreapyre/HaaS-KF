AWSTemplateFormatVersion: 2010-09-09
Description: The AWS CloudFormation template for Front-end application.
Parameters:
  S3ExperimentBucket:
    Type: String
    Description: Bucket for ML Experimeent configuration.
  DashboardURL:
    Type: String
    Description: MlFlow Experiment Dashboard URL.
    Default: None
Resources:
  AppLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}/front-end
  AppLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Ref AppLogGroup
      LogStreamName: console
  IamRoleLambdaExecution:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-FrontEndLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}/front-end*:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}/front-end*:*:*
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Sub >-
                    arn:aws:s3:::${S3ExperimentBucket}
                  - !Sub >-
                    arn:aws:s3:::${S3ExperimentBucket}/*
      Path: /
      RoleName: !Sub ${AWS::StackName}-FrontEndLambdaRole
  AppLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: src/
      Environment:
        Variables:
          S3_BUCKET: !Ref S3ExperimentBucket
          DASHBOARD_URL: !Ref DashboardURL
      FunctionName: !Sub ${AWS::StackName}-FrontEndLambda
      Handler: lambda.handler
      MemorySize: 1024
      Role: !GetAtt 
        - IamRoleLambdaExecution
        - Arn
      Runtime: python3.7
      Timeout: 30
    DependsOn:
      - AppLogGroup
      - IamRoleLambdaExecution
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub ${AWS::StackName}-FrontEnd
      EndpointConfiguration:
        Types:
          - EDGE
  ApiGatewayResourceProxyVar:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodAny:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !GetAtt 
        - ApiGatewayRestApi
        - RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - AppLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
  ApiGatewayMethodProxyVarAny:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceProxyVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - AppLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: console
    DependsOn:
      - ApiGatewayMethodAny
      - ApiGatewayMethodProxyVarAny
  AppLambdaPermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - AppLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayRestApi
          - /*/*
Outputs:
  ServiceEndpoint:
    Description: URL of the service endpoint
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref ApiGatewayRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /console