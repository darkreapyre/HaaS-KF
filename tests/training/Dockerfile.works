FROM nvidia/cuda:9.0-devel-ubuntu16.04 
ENV TENSORFLOW_VERSION=1.12.0 
ENV HOROVOD_VERSION=0.15.2 
 
ENV CUDNN_VERSION=7.1.4.18-1+cuda9.0 
ENV NCCL_VERSION=2.2.13-1+cuda9.0 
 
ARG DASHBOARD_URL 
ENV DASHBOARD_URL=$DASHBOARD_URL 
RUN echo $DASHBOARD_URL 
 
ARG NUM_GPUS 
ENV NUM_GPUS=$NUM_GPUS 
RUN echo $NUM_GPUS 
 
ARG DATASET_NAME 
ENV DATASET_NAME=$DATASET_NAME 
RUN echo $DATASET_NAME 
 
ARG EXPERIMENT_NAME 
ENV EXPERIMENT_NAME=$EXPERIMENT_NAME 
RUN echo $EXPERIMENT_NAME 
 
RUN apt-get update && apt-get install -y --no-install-recommends --allow-downgrades --allow-change-held-packages \ 
      build-essential \ 
      cmake \ 
      git \ 
      curl \ 
      vim \ 
      wget \ 
      ca-certificates \ 
      libcudnn7=${CUDNN_VERSION} \ 
      libnccl2=${NCCL_VERSION} \ 
      libnccl-dev=${NCCL_VERSION} \ 
      libjpeg-dev \ 
      libpng-dev  \ 
      openssl \ 
      libssl-dev \ 
      unzip \ 
      net-tools 
 
RUN wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz 
RUN tar -xvf Python-3.6.6.tgz 
 
RUN cd Python-3.6.6 && ./configure && make && make install 
 
RUN echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list 
 
RUN apt-get install -y --no-install-recommends --allow-downgrades --allow-change-held-packages libgtk2.0-dev 
 
RUN pip3 install --upgrade pip 
 
# Install Open MPI 
RUN mkdir /tmp/openmpi && \ 
    cd /tmp/openmpi && \ 
    wget https://www.open-mpi.org/software/ompi/v3.0/downloads/openmpi-3.0.0.tar.gz && \ 
    tar zxf openmpi-3.0.0.tar.gz && \ 
    cd openmpi-3.0.0 && \ 
    ./configure --enable-orterun-prefix-by-default && \ 
    make -j $(nproc) all && \ 
    make install && \ 
    ldconfig && \ 
    rm -rf /tmp/openmpi 
 
 
# Install TensorFlow and Keras 
RUN pip3 install tensorflow-gpu==${TENSORFLOW_VERSION} keras h5py 
 
# Install Horovod, temporarily using CUDA stubs 
RUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs && \ 
    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 pip3 install --no-cache-dir horovod==${HOROVOD_VERSION} && \ 
    ldconfig 
 
# Create a wrapper for OpenMPI to allow running as root by default 
RUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \ 
    echo '#!/bin/bash' > /usr/local/bin/mpirun && \ 
    echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun && \ 
    chmod a+x /usr/local/bin/mpirun 
 
# Configure OpenMPI to run good defaults: 
#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0 
RUN echo "hwloc_base_binding_policy = none" >> /usr/local/etc/openmpi-mca-params.conf && \ 
    echo "rmaps_base_mapping_policy = slot" >> /usr/local/etc/openmpi-mca-params.conf 
 
# Set default NCCL parameters 
RUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf 
 
ENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH 
ENV PATH /usr/local/openmpi/bin/:$PATH 
ENV PATH=/usr/local/nvidia/bin:$PATH 
 
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 
 
# Install OpenSSH for MPI to communicate between containers 
RUN apt-get install -y --no-install-recommends openssh-client openssh-server 
RUN mkdir -p /var/run/sshd && \ 
  mkdir -p /root/.ssh/ && \ 
  ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \ 
  cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys && \ 
  printf "Host *\n  StrictHostKeyChecking no\n" >> /root/.ssh/config 
 
# Install packages here to avoid OpenMPI/Python rebuild for every change 
RUN apt-get install -y --no-install-recommends --allow-downgrades --allow-change-held-packages \ 
    ethtool \ 
    less \ 
    iproute 
 
RUN pip3 install awscli 
RUN pip3 install boto3 
RUN pip3 install ujson==1.35 
RUN pip3 install opencv-python==4.0.0.21 
RUN pip3 install Cython==0.28.4 
RUN pip3 install pycocotools==2.0.0 
RUN pip3 install matplotlib==3.0.2 
RUN pip3 install mlflow 
RUN pip3 uninstall -y numpy 
RUN pip3 install numpy==1.16.0 
 
########################################################################################## 
# Keras Retinanet 
########################################################################################## 
 
RUN git clone https://github.com/darkreapyre/keras-retinanet.git /tmp/keras-retinanet && \ 
  cd /tmp/keras-retinanet && \ 
  pip3 install . 
 
########################################################################################## 
# SageMaker requirements 
########################################################################################## 
 
COPY horovod/launch.py /launch.py 
COPY horovod/changehostname.c /changehostname.c 
COPY horovod/change-hostname.sh /usr/local/bin/change-hostname.sh 
RUN cp /tmp/keras-retinanet/train.py /train.py 
COPY hostfile /hostfile 
COPY resourceconfig.json /resourceconfig.json 
COPY hyperparameters.json /hyperparameters.json 
COPY run.sh /run.sh 
 
RUN chmod +x /usr/local/bin/change-hostname.sh 
 
# SSH login fix. https://docs.docker.com/engine/examples/running_ssh_service/ 
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd 
 
#ENTRYPOINT ["python3", "/launch.py"] 